/// Strength (alpha) of emissives generated by this component
#define SELECTIVE_EMISSIVE_ALPHA 200
/// Minimal lightness to have an emissive generated at all
#define MINIMAL_LIGHTNESS 20
/// Saturation requirement for only_colored parameter
#define SATURATION_THRESHOLD 40
/// Lightness requirement for only_bright parameter
#define LIGHTNESS_THRESHOLD 75

/**
 * A component which dynamically generates an emissive mask for an atom based on its current appearance using filters
 */
/datum/component/selective_emissive
	/// Should only high saturation parts be emissive?
	var/only_colored = FALSE
	/// Should only high lightness parts be emissive?
	var/only_bright = FALSE
	/// Should emissive parts have a colored overlay attached to them?
	var/force_color = null
	/// Appearance used to mask out low-lightness parts of the parent. Has to be stored here to avoid its execution by GC
	var/mutable_appearance/minimal_mask

/datum/component/selective_emissive/Initialize(only_colored, only_bright, force_color)
	. = ..()
	if(!isatom(parent))
		return COMPONENT_INCOMPATIBLE
	src.only_colored = only_colored
	src.only_bright = only_bright
	src.force_color = force_color

/datum/component/selective_emissive/Destroy(force)
	minimal_mask = null
	return ..()

/datum/component/selective_emissive/RegisterWithParent()
	var/atom/as_atom = parent
	RegisterSignal(as_atom, COMSIG_ATOM_UPDATE_OVERLAYS, PROC_REF(on_update_overlays))
	//RegisterSignal(as_atom, COMSIG_ITEM_GET_SEPARATE_WORN_OVERLAYS, PROC_REF(get_separate_worn_overlays))
	as_atom.update_appearance()

/datum/component/selective_emissive/UnregisterFromParent()
	var/atom/as_atom = parent
	UnregisterSignal(as_atom, list(COMSIG_ATOM_UPDATE_OVERLAYS, COMSIG_ITEM_GET_SEPARATE_WORN_OVERLAYS))
	as_atom.update_appearance()

/datum/component/selective_emissive/proc/on_update_overlays(atom/source, list/overlays)
	SIGNAL_HANDLER

	var/mutable_appearance/copy = new(source.appearance)
	// Need to manually make it act as an emissive
	SET_PLANE_IMPLICIT(copy, EMISSIVE_PLANE)
	copy.color = _EMISSIVE_COLOR(SELECTIVE_EMISSIVE_ALPHA / 255)
	copy.appearance_flags |= EMISSIVE_APPEARANCE_FLAGS

	minimal_mask = new(source.appearance)
	minimal_mask.filters.Cut()
	// Don't ask of the devil
	minimal_mask.render_target = "[REF(source)]_selective_emissive"
	minimal_mask.add_filter("minimal_lightness", 1, color_matrix_filter(list(
		1, 0, 0, 0,
		0, 1, 0, 0,
		0, 0, 1, -(100 / MINIMAL_LIGHTNESS), // Don't speak of the devil
		0, 0, 0, 0,
		0, 0, 0, 2, // Don't think of the devil
	), FILTER_COLOR_HSL))

	/*

	minimal_mask.add_filter("minimal_lightness_cap", 2, color_matrix_filter(list(
		1, 0, 0, 0,
		0, 1, 0, 0,
		0, 0, 1, 0,
		0, 0, 0, 100,
		0, 0, 0, 0,
	)))
	*/

	source.add_filter("selective_emissive", 1, alpha_mask_filter(render_source = "[REF(source)]_selective_emissive", flags = MASK_INVERSE))

	filter_appearance(copy)
	overlays += copy

/// Filter an appearance based on our parameters
/datum/component/selective_emissive/proc/filter_appearance(mutable_appearance/visual)
	return
	//target.add_overlay(minimal_mask)

	/*()
	visual.add_

	if (only_colored)
		visual.add_filter("selective_coloring", 2, color_matrix_filter(list(

		)))
	*/

#undef SELECTIVE_EMISSIVE_ALPHA
#undef MINIMAL_LIGHTNESS
#undef SATURATION_THRESHOLD
#undef LIGHTNESS_THRESHOLD
