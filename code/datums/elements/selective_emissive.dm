/// Strength (alpha) of emissives generated by this element
#define SELECTIVE_EMISSIVE_ALPHA 200
/// Minimal lightness to have an emissive generated at all
#define MINIMAL_LIGHTNESS 10
/// Saturation requirement for only_colored parameter
#define SATURATION_THRESHOLD 40
/// Lightness requirement for only_bright parameter
#define LIGHTNESS_THRESHOLD 75

/**
 * An element which dynamically generates an emissive mask for an atom based on its current appearance using filters
 */
/datum/element/selective_emissive
	element_flags = ELEMENT_BESPOKE
	argument_hash_start_idx = 2
	/// Should only high saturation parts be emissive?
	var/only_colored = FALSE
	/// Should only high lightness parts be emissive?
	var/only_bright = FALSE
	/// Should emissive parts have a colored overlay attached to them?
	var/force_color = null

/datum/element/selective_emissive/Attach(datum/target, only_colored, only_bright, force_color)
	. = ..()
	if(!isatom(target))
		return ELEMENT_INCOMPATIBLE
	src.only_colored = only_colored
	src.only_bright = only_bright
	src.force_color = force_color
	RegisterSignal(target, COMSIG_ATOM_UPDATE_OVERLAYS, PROC_REF(on_update_overlays))
	RegisterSignal(target, COMSIG_ITEM_GET_SEPARATE_WORN_OVERLAYS, PROC_REF(get_separate_worn_overlays))

/datum/element/selective_emissive/Detach(datum/source)
	UnregisterSignal(source, list(COMSIG_ATOM_UPDATE_OVERLAYS, COMSIG_ITEM_GET_SEPARATE_WORN_OVERLAYS))
	return ..()

/datum/element/selective_emissive/proc/on_update_overlays(atom/source, list/overlays)
	SIGNAL_HANDLER

	var/mutable_appearance/copy = new(source.appearance)
	// Need to manually make it act as an emissive
	SET_PLANE_IMPLICIT(copy, EMISSIVE_PLANE)
	copy.color = _EMISSIVE_COLOR(SELECTIVE_EMISSIVE_ALPHA / 255)
	copy.appearance_flags |= EMISSIVE_APPEARANCE_FLAGS
	filter_appearance(copy)
	overlays += copy

	if (!force_color)
		return

	copy = new(source.appearance) // alpha filter!!

/// Filter an appearance based on our parameters
/datum/element/selective_emissive/proc/filter_appearance(mutable_appearance/visual)
	visual.add_filter("selective_lightness_minimum", 1, color_matrix_filter(list(
		1, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0,
	), FILTER_COLOR_HSL))

	if (only_colored)
		visual.add_filter("selective_coloring", 2, color_matrix_filter(list(

		)))

#undef SELECTIVE_EMISSIVE_ALPHA
#undef MINIMAL_LIGHTNESS
#undef SATURATION_THRESHOLD
#undef LIGHTNESS_THRESHOLD
